//Global variable for all post that is fetched from the DOM function. This variable will be used to compare the blog id clicked on the page to load the content of that specific post.
let allFetchedPosts = []; 

//script will wait for the html to load before performing the function defined.
document.addEventListener('DOMContentLoaded', function() { 

	//blogElement variable will access id=blogs in the document to edit blogs area.
	const blogElement = document.getElementById("blogs"); 


	// Json file is fetched, using a URL source. This json will have all the blog data. The file is then read where it identifies seperates posts by { }. It then uses forEach method to transfer the json text to the html document.
	fetch('https://mbissessar.github.io/itec/posts.json') 
		.then(response => response.json()) 
		.then(posts => { 
			// retrieve all posts from the file and assign to global variable
			allFetchedPosts = posts;
			//the forEach method below will create an article element with its child elements and respective classes to format the text from the json file through post
			posts.forEach(post => { 
			
				//assign variables to elements that will update the html document. these variables will be used to pass the data onto the html file from the currently loaded post variable
				const articleElement = document.createElement('article'); 
				const blogTitle = document.createElement('h2');
				
				//assigns the article element with the id for this specific forEach loop such as "id=1". post.id is taken from the json file for the specific loop.
				articleElement.id = post.id;
				
				//set an onclick attribute and its values to the article element, while appending the blog id from post.id in the current loop to help identify clicks
				articleElement.setAttribute('onclick', `displayBlog(${post.id})`);
				

				//store the data from the current post variable which will be in its respective html element container
				blogTitle.textContent = post.title; 

				//inserts the 2 html elements h2 and p in the last position inside the article element.
				articleElement.appendChild(blogTitle);

				//inserts the article element including child elements to blogelement variable that is assigned to element with id=blogs in the html document.
				blogElement.appendChild(articleElement); 
			});						
		}) 
	.catch(error => console.error('Error loading blog posts:', error));
});

/**
displayBlog(id) function will be called once the user clicks one of the blog elements generated by the script earlier. Each article element within the document was assigned an element id, which is pass to the script and is then matched with the ids on the json posts. The function then proceeds to clear the html container element which held all the blog posts, and replaces with the content of the selected blog id.
 **/
function displayBlog(clickedPostId) {
	// Assigns variable for the html element which will be adjusted with the selected blog post.
	const dynamicPostsWrapper = document.getElementById("blogs");
	
	// Find the actual post object from the global variable allFetchedPosts which has all posts from the json, comparing the id that is passed with clickedPostId when the user selected the specific html element with the id assigned.
	const postContent = allFetchedPosts.find(post => post.id == clickedPostId);

	// remove all content from html id=blogs element, removing all the results of the posts generated earlier
	dynamicPostsWrapper.innerHTML = '';
	
	// insert div into html with a defined class for CSS styling
	const singlePost = document.createElement('div');
	singlePost.classList.add('selected-article'); // Add a class for styling
	
	// variable to hold a h2 element for title, getting data from the postContent variable, and within the specific post, the title. This variable then appends to the singlePost variable.
	const selectedtitle = document.createElement('h2');
	selectedtitle.textContent = postContent.title;
	singlePost.appendChild(selectedtitle);
	
	// variable to hold a p element for the content of the blog, getting content data from the postContent variable. This uses the innerHTML method to input a string that the DOM can process the elements in the string. The variable then appended to singlePost.
	const selectedContent = document.createElement('p');
	selectedContent.innerHTML = postContent.content;
	singlePost.appendChild(selectedContent);
	
	// variable for the back button that will insert an <a> element with its respective labels and links at the bottom of the blog post, allowing the user to navigate back to the main blog page.
	const goBack = document.createElement('a');
	goBack.setAttribute('href', 'blog.html');
	goBack.textContent= 'Back';
	goBack.classList.add('back');
	singlePost.appendChild(goBack);
	
	//with all variables aquired for the single post view, it is appended to the 
	dynamicPostsWrapper.appendChild(singlePost);
		
};
