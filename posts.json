[
  {
    "id": "1",
    "title": "Implementing Light/Dark mode on portfolio website – Assignment #2",
    "content": "<p>The original theme of this website is dark, however there are times for the sake of accessibility that a website or application should have a light/dark mode switcher. The goal for this part of the assignment is to create a switcher accessible on any page on this website.</p><h2>What Colors will be used?</h2><p>Below the table details the main dark mode and light mode hex colors that will be implemented in the final product. These are not all element colors, but the main elements of the document.</p><table><thead><tr><th>Page Element</th><th>Dark Mode (default)</th><th>Light Mode</th></tr></thead><tbody><tr><td>Background</td><td>#0E0C0D Grey Black</td><td>#F9FAFB Off White</td></tr><tr><td>Body Text</td><td>#9CA3AF Gray</td><td>#1F2937 Dark Grey</td></tr><tr><td>Content Pod</td><td>#1F2937 Dark Grey</td><td>#D6D3D1 Light Gray</td></tr><tr><td>Text Heading</td><td>Yellow</td><td>Black</td></tr></tbody></tbody></table><h2>What method will be used to implement the switcher?</h2><p>All elements of this website (except for images), colors are defined by a separate CSS file; styles.css. Javascript will be used to change the class of most elements on this page from the dark theme to light and back. A separate CSS file with “.light-mode” defines the light-mode colors for elements. When Javascript is called, it will add .light-mode class to the body element. This method of switching effectively uses CSS descendants to apply the .light-mode class to all elements within it. Once the CSS class or ID light mode is defined, the element will get its change when javascript adds the light class to the body.</p><p>Another important feature that needs to be implemented when using this Javascript method, is a variable to inform the browser of the selected theme in the session. This enables the website to keep its theme as the user navigates the website. This is accomplished by using a Javascript API: sessionStorage to store a variable “pagetheme” with a value “light” or “dark”, to communicate the state the webpage theme is in. This variable will be read by an event listener DOM when the html page is fully loaded. An if statement then checks for the value “light” and applies the light mode css styles to the current document. The if statement in this use case is sufficient because the default theme is dark.</p><p>The light/dark option is located as the last item on the navigation panel list to the left of the page. This functions as a link that calls the function lightdark(), which toggles the light and dark mode on the page while also setting the sessionStorage variable, pagetheme to the current value. Another deliverable for this assignment, is changing the text of the button to light or dark mode to reflect the option when selected. This was included in an if else statement within the javascript function.</p><h2>Try it out!</h2>"
  },
  {
    "id": "2",
    "title": "Dynamic Blog Page Using Javascript",
    "content": "<p>This webpage you are on, is a working example of a dynamic webpage, where the content can be changed without loading another page. This is done by using Javascript to interact with Document Object Model (DOM) to update the original HTML document loaded on the browser. The DOM is loaded on the browser and represents the HTML document as structured object model.</p><p>This blog page is a single HTML file where blog listing content/data are sourced from a separate file. JavaScript can essentially adjust the html elements and style in real time. In the case of this blog page listing, JavaScript inserts an article element for each post that is read from a source file. This in turns provides the user a current list of all blogs from a separate source file and not hard written into the blog page.</p><p>This results in a more structured website code with less noise, adding only 1 line of code to the main html file, separating the data and JavaScript lines of code. This also applies to when the user selects from the list of blogs, Javascript removes the current html elements in the body of the document, using the DOM and based on the data for the blog post located in a separate file, updates the page with the relevant content.</p><h2>The JSON file</h2><p>Each blogs have a title and content section, which will be considered the blog data. This data is stored in a JSON file separate from the blog’s html page. The format is illustrated below. Each blog will be encapsulated in “{ }” and will have tags to relate the data to variables in JavaScript when parsed.</p><h2>The scipts.js file</h2><p>As mentioned previously, JavaScript related code for the blog functions will be stored in a separate file. This contains 2 main functions: <mark>a DOM event listener</mark> and <mark>displayBlog()</mark>.</p><p>The <mark>DOM event listener</mark> is used to wait for the blog page to fully load before running a specific function. In this case the main function is obtaining a list of all blogs in the JSON file and adding to the otherwise empty blog page. Fetch is a JavaScript API that is used to make network request, and enable the browser to obtain a resource, in this case the post.json file with all the blogs.</p><p>Once the data is received, a. then method is used to fetch and parse the Json file, and this is assigned to a global JavaScript variable (important for the second JavaScript function discussed later in this section). A foreach method is used to loop through all the arrays fetched in the newly created variable, utilizing the DOM to generate html elements for each blog post in the file. This as a results give us a list with bubble styling for each post in the source file. One additional important aspect of this fetch method used is to also insert the post id in the foreach method. This will prove useful for the second function in this script.</p><p>The second JavaScript function of the blog page is <mark>displayBlog(clickedPostID)</mark>. For all post that are list on the main page, an id is associated with the clickable html element together with an onclick event. When the user clicks on a blog title, this in turns will pass the id of that post clicked on to the script function, thereby providing valuable ID data for JavaScript to lookup blogs.</p><p>The global JavaScript variable generated earlier when the page was initially loaded, contains the array of all blogs that was fetched from the Json file. This array has an ID value that corresponds to the blog content data within the variable. A find method is used to search the global variable by ID which was passed when the function was called, once found all data for the matched blog post object will be assigned a variable.</p><p>Now the selected blog retrieved, Javascript is used to clear the html element ‘blogs’ that holds the list of al blogs and replace with the selected blog content. DOM is used to accomplish this, similarly as the first function, adding a div, h2, p and a, elements with their respective classes. A back button using an a-link element which navigates the user back to the blog page back from the selected content view.</p><p>An important note, each blog will have various amounts of headings and paragraphs, in order to pass the html elements for the browser to interpret, <mark>.innerHTML</mark> property was used to dynamically insert the selected blog post compared to using the .textContent property which transfers only the text content, ignoring html elements within the text.</p>"
  },
  {
    "id": "3",
    "title": "Blog Post Test #3",
    "content": "This will be the content of the blog post #1. This will be the content of the blog post #3. This will be the content of the blog post #3. This will be the content of the blog post #3"
  }
]


